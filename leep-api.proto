syntax = "proto3";

option csharp_namespace = "LiveEmoteEventProxy.Api.Contracts";

import "google/protobuf/timestamp.proto";

package emote;

service Emotes {
  rpc StreamEvents (stream PubSubRequest) returns (stream PubSubResponse);
}

message PubSubRequest {
  repeated PubSubAction pubSubActions = 1;
}

message PubSubAction {
  oneof action {
    SubscribeAction subscribe = 1;
    UnsubscribeAction unsubscribe = 2;
  }
}

enum EmoteProvider {
  BetterTTV = 0;
  SevenTV = 1;
}

// Subscribes to an event
// If called multiples times for the same channel, duplicate subscriptions will be ignored
message SubscribeAction {
  oneof channel_identifier {
    uint64 twitch = 1;
  }

  repeated EmoteProvider providers = 2;
}

// Unsubscribes from an event
// If called multiples times for the same channel, duplicate unsubscriptions will be ignored
message UnsubscribeAction {
  oneof channel_identifier {
    uint64 twitch = 1;
  }

  repeated EmoteProvider providers = 2;
}




// TODO: proper response model, via acknowledgements
// FIXME: hate this naming (with a passion)
message PubSubResponse {
  oneof event {
    // TODO: system events
    EmoteInitEvent init = 16;
    EmoteAddedEvent added = 17;
    EmoteRemovedEvent removed = 18;
    EmoteUpdatedEvent updated = 19;
  }
}

enum CloseType {
  Hard = 0;

  /*
   * Reconnection to the server is recommended, and a reconnection token is available to resume the current session
   */
  Reconnect = 1;
}

message EmoteInitEvent {
  // TODO: repeated emote added field to represent initial state
  string stubData = 1;
}

message EmoteAddedEvent {
  // Pretend like these events have actual models, haven't done that yet
  string stubData = 1;
}

message EmoteRemovedEvent {
  string stubData = 1;
}

message EmoteUpdatedEvent {
  string stubData = 1;
}
